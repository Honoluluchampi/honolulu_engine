#version 450

#extension GL_GOOGLE_include_directive : require

#include "../../common/fdtd2_config.h"
#include "../../common/fdtd_struct.h"

layout (local_size_x = fdtd2_local_size_x, local_size_y = fdtd2_local_size_y, local_size_z = 1) in;

// pressure
layout(std430, set = 0, binding = 0) buffer CurrentP { particle curr_p[]; };
layout(std430, set = 1, binding = 0) readonly buffer PreviousP { particle prev_p[]; };

// push constants
layout(push_constant) uniform Push { fdtd2_push push; };

// grid id
uint g_id(uint x, uint y) { return (x + 1) + (y + 1) * (push.x_grid + 1); }

// exciter constants
const float exc_grid_count = 5;
const float w = 0.012;
const float h = 0.0006;
const float k = 8000000;
const float rho = 1.1;
const float dx = 0.00383;
const float dp_max = k * h;
const float c_area = w * h;
const float mouth_p = 3000.f;

void main() {
  uint i = gl_LocalInvocationID.x + gl_WorkGroupID.x * fdtd2_local_size_x;
  uint j = gl_LocalInvocationID.y + gl_WorkGroupID.y * fdtd2_local_size_y;

  if (i < push.x_grid && j < push.y_grid) // inside domain
  {
    float state = prev_p[g_id(i, j)].values.w;
    if (state >= 0) {
      float pml = max(prev_p[g_id(i, j)].values.w, 0.f);

      // update pressure
      float right_is_domain = float(prev_p[g_id(i + 1, j)].values.w >= 0);
      float upper_is_domain = float(prev_p[g_id(i, j + 1)].values.w >= 0);

      float p = (prev_p[g_id(i, j)].values.z - push.p_fac *
      (prev_p[g_id(i, j)].values.x * right_is_domain - prev_p[g_id(i - 1, j)].values.x +
      prev_p[g_id(i, j)].values.y * upper_is_domain - prev_p[g_id(i, j - 1)].values.y)
      ) / (1 + pml);

      curr_p[g_id(i, j)].values.z = p;

      // re-calculate the current pressure to reduce the barrier synchronization
      if (i < push.x_grid - 1) {
        float right_is_domain_x1 = float(prev_p[g_id(i + 2, j)].values.w >= 0);
        float upper_is_domain_x1 = float(prev_p[g_id(i + 1, j + 1)].values.w >= 0);

        float p_x1 = (prev_p[g_id(i + 1, j)].values.z - push.p_fac *
        (prev_p[g_id(i + 1, j)].values.x * right_is_domain_x1 - prev_p[g_id(i, j)].values.x +
        prev_p[g_id(i + 1, j)].values.y * upper_is_domain_x1 - prev_p[g_id(i + 1, j - 1)].values.y)
        ) / (1 + pml);

        curr_p[g_id(i, j)].values.x =
        (prev_p[g_id(i, j)].values.x - push.v_fac * (p_x1 - p)) / (1 + pml);
      }

      if (j < push.y_grid - 1) {
        float right_is_domain_y1 = float(prev_p[g_id(i + 1, j + 1)].values.w >= 0);
        float upper_is_domain_y1 = float(prev_p[g_id(i, j + 2)].values.w >= 0);

        float p_y1 = (prev_p[g_id(i, j + 1)].values.z - push.p_fac *
        (prev_p[g_id(i, j + 1)].values.x * right_is_domain_y1 - prev_p[g_id(i - 1, j + 1)].values.x +
        prev_p[g_id(i, j + 1)].values.y * upper_is_domain_y1 - prev_p[g_id(i, j)].values.y)
        ) / (1 + pml);

        curr_p[g_id(i, j)].values.y =
        (prev_p[g_id(i, j)].values.y - push.v_fac * (p_y1 - p)) / (1 + pml);
      }
    }
    else if (state == -2) // exciter
    {
      float next_p = prev_p[g_id(i + 1, 39)].values.z;
      float dp = mouth_p - next_p;
      float u_bore = c_area * (1 - dp / dp_max) * sqrt(2.f * dp / rho);
      if (dp < 0)
        u_bore = 0.f;
      float shelf = 0.5 + 0.5 * tanh(4.f * (-1.f + (dp_max - dp) / (0.01 * dp_max)));
      curr_p[g_id(i, j)].values.x = u_bore * shelf / 0.000367;
    }
  }
}