#version 450

#extension GL_GOOGLE_include_directive : require

#include "../../common/fdtd2_config.h"
#include "../../common/fdtd_struct.h"

layout (local_size_x = fdtd2_local_size_x, local_size_y = fdtd2_local_size_y, local_size_z = 1) in;

// pressure
layout(std430, set = 0, binding = 0) buffer CurrentP { particle curr_p[]; };
layout(std430, set = 0, binding = 1) buffer CurrentVx { particle curr_vx[]; };
layout(std430, set = 0, binding = 2) buffer CurrentVy { particle curr_vy[]; };

layout(std430, set = 1, binding = 0) readonly buffer PreviousP { particle prev_p[]; };
layout(std430, set = 1, binding = 1) readonly buffer PreviousVx { particle prev_vx[]; };
layout(std430, set = 1, binding = 2) readonly buffer PreviousVy { particle prev_vy[]; };

// push constants
layout(push_constant) uniform Push { fdtd2_push push; };

uint p_id(uint x, uint y) { return x + y * push.x_grid; }
uint vx_id(uint x, uint y) { return (x + 1) + y * (push.x_grid + 1); }
uint vy_id(uint x, uint y) { return x + (y + 1) * push.x_grid; }

void main() {
  uint i = gl_LocalInvocationID.x + gl_WorkGroupID.x * gl_WorkGroupSize.x;
  uint j = gl_LocalInvocationID.y + gl_WorkGroupID.y * gl_WorkGroupSize.y;

  if (push.reset >= 1) {
    curr_p[p_id(i, j)].value = 0.f;
    curr_vx[vx_id(i, j)].value = 0.f;
    curr_vy[vy_id(i, j)].value = 0.f;
    if (i == push.x_grid / 2 && j == push.y_grid / 2)
      curr_p[p_id(i, j)].value = 128.f;
    return;
  }

  // update particle velocity
  // neumann bc
  if (i < push.x_grid - 1) {
    curr_vx[vx_id(i, j)].value = prev_vx[vx_id(i, j)].value - push.v_fac *
                          (prev_p[p_id(i + 1, j)].value - prev_p[p_id(i, j)].value); }
  if (j < push.y_grid - 1) {
    curr_vy[vy_id(i, j)].value = prev_vy[vy_id(i, j)].value - push.v_fac *
                          (prev_p[p_id(i, j + 1)].value - prev_p[p_id(i, j)].value); }

  barrier();
  if (i < push.x_grid && j < push.y_grid) {
    // update pressure
    curr_p[p_id(i, j)].value = prev_p[p_id(i, j)].value - push.p_fac *
                        (curr_vx[vx_id(i, j)].value - curr_vx[vx_id(i - 1, j)].value +
                         curr_vy[vy_id(i, j)].value - curr_vy[vy_id(i, j - 1)].value);
  }
}