#version 450

#extension GL_GOOGLE_include_directive : require

#include "../common/fdtd_cylindrical.h"

layout (
  local_size_x = fdtd_cylindrical_local_size_x,
  local_size_y = fdtd_cylindrical_local_size_y,
  local_size_z = fdtd_cylindrical_local_size_z
) in;

// pressure
layout(std430, set = 0, binding = 0) buffer Curr { particle curr[]; };
layout(std430, set = 1, binding = 0) readonly buffer Prev0 { particle prev0[]; };
layout(std430, set = 2, binding = 0) readonly buffer Prev1 { particle prev1[]; };
layout(std430, set = 3, binding = 0) writeonly buffer SoundBuf { float sound_buffer[]; };

// push constants
layout(push_constant) uniform Push { fdtd_cylindrical_push push; };

// grid id
uint g_id(uint i, uint j) { return i + j * push.z_grid_count; }

// exciter constants
const float exc_grid_count = 5;
const float w = 0.012;
const float h = 0.0006;
const float k = 8000000;
const float rho = 1.1;
const float dx = 0.00383;
const float dp_max = k * h;
const float c_area = w * h;

// u bore filter
const float ubf_a0 = 0.160863;
const float ubf_a1 = 0.321726;
const float ubf_a2 = 0.160863;
const float ubf_b1 = -0.590436;
const float ubf_b2 = 0.233886;

float calc_p(uint i, uint j)
{
  float state = prev0[g_id(i, j)].state;
  float pml = max(state, 0.f);

//  float r = DR * float(max(int(j), 1));
  float r = DR * float(j + 0.5f);
//  float rp2 = DR * (float(j) + 1.f); // radius at r = j + 1/2
//  float rm2 = DR * float(j); // raduis at r = j - 1/2
  // if the above grid is wall, vr should be 0
  float upper_state = prev0[g_id(i, j + 1)].state;
  float upper_vr = prev0[g_id(i, j)].vr * float(upper_state != WALL && upper_state != EXCITER);
  float lower_vr = j == 0 ? 0 : prev0[g_id(i, j - 1)].vr;
  float vr_center = (upper_vr + lower_vr) / 2.f;

  float dvrdr = (upper_vr - lower_vr) / DR;
  // if the left grid is wall, vz should be 0
  float right_state = prev0[g_id(i + 1, j)].state;
  float left_state = prev0[g_id(i, j)].state;
  float dvzdz = (prev0[g_id(i + 1, j)].vz * float(right_state != EXCITER) - prev0[g_id(i, j)].vz * float(left_state != WALL)) / DZ;
//  float r_term = vr_center / r + (upper_vr - lower_vr) / DR;
  //  float r_term = ((rp2 / r) * upper_vr - (rm2 / r) * lower_vr) / DR;
  float p = prev0[g_id(i, j)].p - push.p_fac * (vr_center / r + dvrdr + dvzdz);
  p /= (1.f + pml);

  return p;
}

void main() {
  uint i = gl_LocalInvocationID.x + gl_WorkGroupID.x * fdtd_cylindrical_local_size_x;
  uint j = gl_LocalInvocationID.y + gl_WorkGroupID.y * fdtd_cylindrical_local_size_y;

  bool on_z = i < push.z_grid_count - 1;
  bool on_r = j < push.r_grid_count;

  if (on_z && on_r) // inside domain
  {
    uint idx = g_id(i, j);
    float state = prev0[g_id(i, j)].state;
    float pml = max(state, 0.f);

    if (state >= -1) {
      // update pressure
      float p = calc_p(i, j);
      curr[idx].p = p;

      // re-calculate the current pressure to reduce the barrier synchronization
      // update vz
      if (i > 0) {
        float p_xm1 = calc_p(i - 1, j);
        curr[idx].vz = (prev0[idx].vz - push.v_fac * (p - p_xm1) / DZ) / (1 + pml);
      }

      // update y velo
      if (j < push.r_grid_count - 1) {
        float p_yp1 = calc_p(i, j + 1);
        curr[idx].vr = (prev0[idx].vr - push.v_fac * (p_yp1 - p) / DR) / (1 + pml);
      }

      if (idx == push.listener_index)
        sound_buffer[push.buffer_index] = p;
    }
    else if (state == EXCITER) // exciter
    {
      float next_p = prev0[g_id(i + 1, 0)].p;
      float dp = push.input_pressure - next_p;
      float u_bore = c_area * (1 - dp / dp_max) * sqrt(2.f * dp / rho);
      if (dp <= 0.05 * dp_max)
        u_bore = 0.f;
      float shelf = 0.5 + 0.5 * tanh(4.f * (-1.f + (dp_max - dp) / (0.01 * dp_max)));

      // low-pass filter uses redandunt memory(vr) to store input value
      curr[idx].vr = u_bore * shelf / 0.000367 * 14.f;
      curr[idx].vz =
      ubf_a0 * curr[idx].vr
      + ubf_a1 * prev0[idx].vr
      + ubf_a2 * prev1[idx].vr
      - ubf_b1 * prev0[idx].vz
      - ubf_b2 * prev1[idx].vz;
    }
  }
}