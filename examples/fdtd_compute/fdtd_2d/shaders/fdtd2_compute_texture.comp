#version 450

#extension GL_GOOGLE_include_directive : require

#include "../common/fdtd2_config.h"
#include "../common/fdtd_struct.h"

layout (local_size_x = fdtd2_local_size_x, local_size_y = fdtd2_local_size_y, local_size_z = 1) in;

// pressure
layout(set = 0, binding = 0, rgba32f) writeonly uniform image2D curr;
layout(set = 1, binding = 0, rgba32f) readonly  uniform image2D prev;

// push constants
layout(push_constant) uniform Push { fdtd2_push push; };

// grid id
ivec2 g_id(uint x, uint y) { return ivec2(x + 1, y + 1); }

float calc_curr_p(uint i, uint j) {
  vec4 on_prev = imageLoad(prev, g_id(i, j));
  return on_prev.z - push.p_fac *
    (on_prev.x - imageLoad(prev, g_id(i - 1, j)).x +
    on_prev.y - imageLoad(prev, g_id(i, j - 1)).y);
}

void main() {
  uint i = gl_LocalInvocationID.x + gl_WorkGroupID.x * fdtd2_local_size_x;
  uint j = gl_LocalInvocationID.y + gl_WorkGroupID.y * fdtd2_local_size_y;

  if (i < push.x_grid && j < push.y_grid) {
    // update pressure
    float p = calc_curr_p(i, j);

    float vx = 0;
    float vy = 0;
    // re-calculate the current pressure not to reduce the barrier synchronization
    if (i < push.x_grid - 1) {
      float p_x1 = calc_curr_p(i + 1, j);
      vx = imageLoad(prev, g_id(i, j)).x - push.v_fac * (p_x1 - p);
    }

    if (j < push.y_grid - 1) {
      float p_y1 = calc_curr_p(i, j + 1);
      vy = imageLoad(prev, g_id(i, j)).y - push.v_fac * (p_y1 - p);
    }

    // write values
    imageStore(curr, g_id(i, j), vec4(p, vx, vy, 0));
  }
}